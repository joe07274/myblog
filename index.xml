<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hacking Management</title>
    <link>https://joe07274.github.io/myblog/</link>
    <description>Recent content on Hacking Management</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright (c) 2008 - 2019, Steve Francia; all rights reserved.</copyright>
    <lastBuildDate>Thu, 28 Jan 2021 02:18:45 +0000</lastBuildDate><atom:link href="https://joe07274.github.io/myblog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>openWrt基于chinaDNS的域名解析防污染搭建</title>
      <link>https://joe07274.github.io/myblog/project/blog_20210128_10/</link>
      <pubDate>Thu, 28 Jan 2021 02:18:45 +0000</pubDate>
      
      <guid>https://joe07274.github.io/myblog/project/blog_20210128_10/</guid>
      <description>方案： 因为考虑到移动端也想FQ出去访问，而且当时移动端访问就已经构建好了shadowsocks，所以这次在OpenWRT上也就选用了透明代理+shadowsocks的方案。这套方案已经有很多教程文档，所以不赘述如何构建，更多是分享下自己的调试经历。 因为OpenWRT里面已经集成了DNSmasq，所以子网访问的DNS请求会直接去请求OpenWRT中的DNSmasq服务，这也是为什么很多时候初始安装完OpenWRT无法访问到公网服务，提示The Host is not resolvable错误的主要原因，对没有配置DNS经验的小白上手会有些懵。 同样道理，FQ出去的访问请求也需要DNS解析，而为了避免被GFW的DNS污染。所以，业界已经有一套完整的解决方案，就是China-DNS + DNS-Foward的方案。其中China-DNS主要是为了通过一个过滤名单，将需要FQ的解析走指定的特殊路径，而国内的域名请求则直接bypass，而这里指的特殊路径就是另外一个工具DNS-Foward来完成。所以为了防止被污染域名的DNS请求路径就是： DNSmasq -&amp;gt; China-DNS -&amp;gt; DNS-Foward 在我构建环境中，上述三个服务对应的端口则分别是： 53 -&amp;gt; 35353 -&amp;gt; 35352 整个FQ的访问链路入下图所示， 其中红色部分为DNS请求的路径（即上述描述路径），其中绿色部分为网站业务访问的路径（直接走shadowsocks）。
部署示意图： 部署细节： ChinaDNS配置： DNS-Forward配置： DNSmasq配置： 调试方法： 因为DNS解析访问链路长，对初始使用的情况摸索和调试就会是非常痛苦的过程。 首先需求确认服务是否都已启动ok，方法命令行： 如果发现三个服务的进程都是已经正常运行，恭喜，setp1成功， 这里比较坑的是chinaDNS，因为默认端口5353，可能部分的OpenWrt系统有服务端口冲突问题，所以这也是为什么我改为了35353，这个点一定要细心check 其次开始测试国内域名的访问是否正常，方法命令行： 如果53端口可以访问通，恭喜，DNSmasq工作正常 最后开始测试FQ域名的访问是否正常，方法命令行： 如果35353端口可以访问通，恭喜，ChinaDNS工作正常 再测试下53端口，方法命令行： 此时，如果解析ye也成功，并且解析记录和上一次相同，那么说明DNSmasq走ChinaDNS工作正常， 然后就是可以再浏览器中尝试下访问，如果能够访问通，那就大功告成了。 如果访问不通，此时就要留意下报错信息，如果是The Host is not resolvable，那就是大概率域名还是被污染，建议更换下DNS-Foward的海外DNS服务器然后再试试。如果是被TCP reset了，那说明shadowsocks服务可能被了。
参考： openwrt路由器dnsmasq部分域名无法解析 加速你的网络！DNS 去AD+抗污染+速度优选 综合方案（独立使用） Shadowsocks + OpenWRT + dnsmasq-full + ipset + gfwList 实现路由器（小米路由器 mini）自动翻墙 科学上网3：macos使用shadowsocks做透明代理
 本文通过 mirror 和 hugo 生成，原始地址 https://github.com/joe07274/blog/issues/10</description>
    </item>
    
    <item>
      <title>pwnagotchi搭建和调试</title>
      <link>https://joe07274.github.io/myblog/project/blog_20210127_9/</link>
      <pubDate>Wed, 27 Jan 2021 01:46:49 +0000</pubDate>
      
      <guid>https://joe07274.github.io/myblog/project/blog_20210127_9/</guid>
      <description>硬件清单：   ups电源di&amp;rsquo;ban底板，这个板带时钟   1.33寸屏幕   外壳   树莓派 pi zero w，这个就不介绍了，网上随便哪个店都有卖
  软件清单： 官方的镜像下载位置： https://github.com/evilsocket/pwnagotchi/releases/tag/v1.5.3 原始镜像有1.9G，而且下载非常缓慢，建议从下面这个国内加速下载的方法： https://d.serctl.com/?uuid=5827f167-913d-4580-9813-7da48faf37d8 最后不要忘记校验下下载的文件sha256是否和官方的一致，做安全这个是习惯
安装&amp;amp;启动： 1. 烧写镜像 用的是linux的烧写方式，windows可以傻瓜式的用可视化工具烧写，不赘述自行搜索烧写攻略即可，和树莓派烧写方式一致 查看SD卡所在的磁盘路径： sudo fdisk -l 找到自己SD卡所在的挂载路径，其中如果有sdcard1、sdcard2之类的是分区信息，忽略即可，我们要找的是挂载的路径信息
umount掉当前挂载的SD卡文件系统 sudo umount /dev/sdcard
开始用dd烧写系统，直接参考pwnagotchi的说明文档即可，很简单，但不要把of路径写错，否则宿主机操作系统gg，或者宿主机磁盘数据被擦写就完蛋了 dd if=path/to/pwnagotchi-raspbian-lite-XXX.img of=/dev/sdcard bs=1M
2. 配置启动文件 在烧写好镜像文件后，需要在根目录中添加一份启动的配置文件config.toml，先来一个最基本的配置文件
main.name = \&amp;quot;pwnagotchi\&amp;quot;main.lang = \&amp;quot;en\&amp;quot;main.whitelist = [\&amp;quot;EXAMPLE_NETWORK\&amp;quot;,\&amp;quot;ANOTHER_EXAMPLE_NETWORK\&amp;quot;,\&amp;quot;fo:od:ba:be:fo:od\&amp;quot;,\&amp;quot;fo:od:ba\&amp;quot;]main.plugins.grid.enabled = truemain.plugins.grid.report = truemain.plugins.grid.exclude = [\&amp;quot;YourHomeNetworkHere\&amp;quot;]ui.</description>
    </item>
    
    <item>
      <title>树莓派通过USB桥接电脑进行通信（实战篇）</title>
      <link>https://joe07274.github.io/myblog/project/blog_20210113_6/</link>
      <pubDate>Wed, 13 Jan 2021 02:22:27 +0000</pubDate>
      
      <guid>https://joe07274.github.io/myblog/project/blog_20210113_6/</guid>
      <description>树莓派 Zero 之所以成为一款非常棒的单板计算机并不全因为它小巧的尺寸和便宜的价格，还得益于它便捷、易用的特性。在加装了Zero Quick Plug或 microUSB/USB 转换头之后，将树莓派 Zero 和电脑连接起来。树莓派 Zero 即可配置成 USB/以太网设备，这时仅需要一个 USB 接口就实现给树莓派供电的同时将它接入因特网。不再需要携带额外的电源适配器、 USB HUB和无线网卡。可以说这是迄今为止连接树莓派最简单、方便的方式！
对于 Raspbian 2016-10-5 之后的系统镜像，你只需要在系统 SD 卡上修改几处配置文件即可将树莓派配置成一个 USB/以太网设备。
配置 CONFIG.TXT 和 CMDLINE.TXT 文件 请确认你刷入的系统镜像是 2016-10-5 之后的版本。将刷好系统的 SD 卡在电脑上打开，进入 SD 卡根目录并打开 config.txt 文件。在文件末尾添加一行 dtoverlay=dwc2。 保存并关闭 config.txt 文件。
再打开 cmdline.txt 文件，请确认你的编辑器已关闭“自动换行”。编辑这个文件的时候不需要插入任何换行符，所有字符都在同一行。找到 rootwait，在后面插入 modules-load=dwc2,g_ether。 保存并关闭 cmdline.txt 文件。
在根目录创建一个名为 ssh 的文件或目录。 启动并登录树莓派Zero系统 把 SD 卡插入树莓派 Zero，用Zero Quick Plug或 microUSB/USB 转换头将树莓派 Zero 和电脑连接起来。 图中用到的这款连接部件是树莓派 Zero 多功能 USB 插头（Zero Quick Plug）。 这时系统会自动识别到树莓派。 等待树莓派启动可能需要半分钟，然后就可以在网络列表中看到了设备已分配好 IP 地址。 现在，就可以尝试通过 SSH 连接树莓派的地址 raspberrypi.</description>
    </item>
    
    <item>
      <title>自动化测试文档</title>
      <link>https://joe07274.github.io/myblog/project/blog_20210106_4/</link>
      <pubDate>Wed, 06 Jan 2021 03:22:47 +0000</pubDate>
      
      <guid>https://joe07274.github.io/myblog/project/blog_20210106_4/</guid>
      <description>自动化测试构建blog机制是否生效  本文通过 mirror 和 hugo 生成，原始地址 https://github.com/joe07274/blog/issues/4
 </description>
    </item>
    
    <item>
      <title>这是一篇测试文档</title>
      <link>https://joe07274.github.io/myblog/project/blog_20210105_3/</link>
      <pubDate>Tue, 05 Jan 2021 16:31:36 +0000</pubDate>
      
      <guid>https://joe07274.github.io/myblog/project/blog_20210105_3/</guid>
      <description>文档内容空白  本文通过 mirror 和 hugo 生成，原始地址 https://github.com/joe07274/blog/issues/3
 </description>
    </item>
    
    <item>
      <title>这是一份测试的blog</title>
      <link>https://joe07274.github.io/myblog/project/blog_20210105_2/</link>
      <pubDate>Tue, 05 Jan 2021 06:58:25 +0000</pubDate>
      
      <guid>https://joe07274.github.io/myblog/project/blog_20210105_2/</guid>
      <description>测试下mirror的抓取功能是否符合预期
这里是图片： 这里是链接： https://www.cirmall.com/bbs/thread-15274-1-1.html
这里是文本 这里是划线
这里是补充说明 补充说明1  本文通过 mirror 和 hugo 生成，原始地址 https://github.com/joe07274/blog/issues/2
 </description>
    </item>
    
    <item>
      <title>使用github的issues功能写博客</title>
      <link>https://joe07274.github.io/myblog/project/blog_20201003_1/</link>
      <pubDate>Sat, 03 Oct 2020 02:36:25 +0000</pubDate>
      
      <guid>https://joe07274.github.io/myblog/project/blog_20201003_1/</guid>
      <description>参考的资料： https://github.com/zp1112/blog/issues/3
 本文通过 mirror 和 hugo 生成，原始地址 https://github.com/joe07274/blog/issues/1
 </description>
    </item>
    
  </channel>
</rss>
